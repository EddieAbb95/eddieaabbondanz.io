<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Design on Eddie Abbondanzio</title>
    <link>https://eddieabbondanz.io/categories/software-design/</link>
    <description>Recent content in Software Design on Eddie Abbondanzio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    <lastBuildDate>Fri, 02 Nov 2018 05:12:42 -0400</lastBuildDate><atom:link href="https://eddieabbondanz.io/categories/software-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Design - Marker Interfaces</title>
      <link>https://eddieabbondanz.io/post/software-design/marker-interfaces/</link>
      <pubDate>Fri, 02 Nov 2018 05:12:42 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/marker-interfaces/</guid>
      <description>What Are They? A marker interface is an empty interface (no methods or properties) that is used to identify classes that implement it belong to a special group. Some might argue that this is a code smell, but in certain situations they can be the best solution for constraining types.
It should be noted that the purpose of marker interfaces is a perfect job for the decorator pattern. However, in some languages (C# for example) attributes lack the support we need to implement a quick solution.</description>
    </item>
    
    <item>
      <title>Software Design - Magic Numbers</title>
      <link>https://eddieabbondanz.io/post/software-design/magic-numbers/</link>
      <pubDate>Mon, 29 Oct 2018 19:16:42 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/magic-numbers/</guid>
      <description>What Are They? Magic numbers are numbers in code that appear to be arbitrary, but actually serve a purpose. They are commonly described as an anti-pattern as they diminish code quality, and are &amp;ldquo;referred to as breaking one of the oldest rules of programming, dating back to the COBOL, FORTRAN and PL/1 manuals of the 1960s&amp;rdquo;. [1]
However, this does not mean that all constants should be blindly replaced with pre-defined constants.</description>
    </item>
    
    <item>
      <title>Software Design - Dependency Injection and Inversion</title>
      <link>https://eddieabbondanz.io/post/software-design/dependency-injection/</link>
      <pubDate>Thu, 18 Oct 2018 06:34:42 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/dependency-injection/</guid>
      <description>What are they? While it may seem like nothing more than buzz words, dependency injection is a well known principle. In fact, you&amp;rsquo;ve likely used it yourself in the past and just didn&amp;rsquo;t know the technique had a name. Dependency injection can be thought of as passing a resource required by a class to the class through one of several means. While the class could instantiate a new instance of the resource itself, by using dependency injection we introduce an easier way to take advantage of dependency inversion.</description>
    </item>
    
    <item>
      <title>Software Design - Unit Tests vs Integration Tests</title>
      <link>https://eddieabbondanz.io/post/software-design/unit-tests-vs-integration-tests/</link>
      <pubDate>Mon, 15 Oct 2018 05:16:42 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/unit-tests-vs-integration-tests/</guid>
      <description>Preface Unit tests and integration tests are designed to serve two different purposes. They are not meant to substitute each other, and each type has a specific focus. However, developers tend to struggle to determine the border that seperates unit tests and integration tests as there is no set hard limit on either one.
What is a Unit Test? Unit is somewhat of an ambiguous term, but in this situation it can be thought of as the smallest piece of code that can be isolated from the rest of the program.</description>
    </item>
    
    <item>
      <title>Software Design - Validator Pattern</title>
      <link>https://eddieabbondanz.io/post/software-design/validator-pattern/</link>
      <pubDate>Wed, 10 Oct 2018 05:16:42 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/validator-pattern/</guid>
      <description>Validating Objects Based on Context It&amp;rsquo;s quite typical for a Domain Driven Design (DDD) project to need validation for it&amp;rsquo;s domain models. While it may be sufficient to solve this by adding an IsValid() method to each model, this can cause confusion for the developer by cluttering the model class, and/or by requiring the IsValid() method to be generalized that it covers a large range of validation rules for any situation that may arise.</description>
    </item>
    
  </channel>
</rss>
